---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dash.fullname" . }}
  labels:
    {{- include "dash.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "dash.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/{{ include "dash.fullname" . }}-secrets: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
{{- if or .Values.extraConfigVars .Values.extraSecretVars }}
{{- if .Values.extraConfigVars }}
        checksum/{{ include "dash.fullname" . }}-config-extra: {{ include (print $.Template.BasePath "/configmap-extra.yaml") . | sha256sum }}
{{- end }}
{{ if .Values.extraSecretVars }}
        checksum/{{ include "dash.fullname" . }}-secrets-extra: {{ include (print $.Template.BasePath "/secret-extra.yaml") . | sha256sum }}
{{- end }}
{{- end }}
      labels:
        {{- include "dash.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccount: dash-sa
      initContainers:
        - name: wait-for-postgresql
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          command:
            - 'sh'
            - '-c'
            - 'until npm run cli:database:status; do echo "Will try again in 2 seconds..."; sleep 2; done;'
          envFrom:
            - secretRef:
                name: {{ include "dash.fullname" . }}-secrets
          env:
            - name: CLI_PATH
              value: ./cli.js
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SERVER_BASE_URL
              value: "{{ .Values.global.baseUrl }}"
          envFrom:
            - secretRef:
                name: {{ include "dash.fullname" . }}-secrets
{{- if or .Values.extraConfigVars .Values.extraSecretVars }}
{{- if .Values.extraConfigVars }}
            - configMapRef:
                name: {{ include "dash.fullname" . }}-config-extra
{{- end }}
{{ if .Values.extraSecretVars }}
            - secretRef:
                name: {{ include "dash.fullname" . }}-secrets-extra
{{- end }}
{{- end }}
          ports:
            - containerPort: {{ .Values.service.port }}
          livenessProbe:
            httpGet:
              path: /api/info
              port: {{ .Values.service.port }}
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 2
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.service.port }}
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 2
            periodSeconds: 10
          resources:
{{- toYaml .Values.resources | nindent 12 }}
        - name: kubesec
          image: "{{ .Values.kubesec.registry }}/{{ .Values.kubesec.repository }}:{{ .Values.kubesec.tag }}"
          ports:
            - containerPort: 8080
          resources:
{{- toYaml .Values.resources | nindent 12 }}
{{- with .Values.nodeSelector }}
      nodeSelector:
{{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{- toYaml . | nindent 8 }}
{{- end }}
