name: Forked PR Testing

on:
  workflow_call:
    inputs:
      kubernetes-version:
        required: false
        type: string
        default: 'v1.27.3'
      gatekeeper-version:
        required: false
        type: string
        default: '3.12.0'
      helm-version:
        required: false
        type: string
        default: '3.12.0'
      dash-image-version:
        required: false
        type: string
      dash-image-tags:
        required: true
        type: string
      trawler-image-version:
        required: false
        type: string
      trawler-image-tags:
        required: true
        type: string
      m9sweeper-chart-version:
        required: false
        type: string
      cni:
        required: false
        type: string
        default: 'calico'

jobs:
  docker_dash:
    name: Build Dash Image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Dash
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          provenance: false
          tags: ${{ inputs.dash-image-tags }}
          cache-from: type=gha,scope=build-dash-amd64
          cache-to: type=gha,mode=max,scope=build-dash-amd64
          outputs: type=docker,dest=/tmp/dash.tar

      - name: Upload Dash Image
        uses: actions/upload-artifact@v3
        with:
          path: /tmp/dash.tar
          name: dash
          retention-days: 5

  docker_trawler:
    name: Build Trawler Image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Trawler
        uses: docker/build-push-action@v4
        with:
          context: trawler/
          push: false
          provenance: false
          tags: ${{ inputs.trawler-image-tags }}
          cache-from: type=gha,scope=build-trawler-amd64
          cache-to: type=gha,mode=max,scope=build-trawler-amd64

      - name: Upload Trawler Image
        uses: actions/upload-artifact@v3
        with:
          path: /tmp/dash.tar
          name: trawler
          retention-days: 5

  run_tests:
    name: Test on k8s ${{ inputs.kubernetes-version }}
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ inputs.helm-version }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ inputs.kubernetes-version }}

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version-file: 'selenium-testing/.nvmrc'

      - name: Install Google Chrome
        run: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
          rm google-chrome-stable_current_amd64.deb

      - name: Add m9sweeper helm repository
        run: |
          helm repo add m9sweeper https://m9sweeper.github.io/m9sweeper
          helm repo update

      - name: Start minikube
        run: minikube start --cpus=4 --memory=6g --cni=${{ inputs.cni }} --kubernetes-version=${{ inputs.kubernetes-version }}

      - name: Wait for Trawler Build
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: trawler_build_wait
        with:
          checkName: 'Run Selenium Tests / Build Trawler Image'
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          timeoutSeconds: 3600

      - name: Wait for Dash Build
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: dash_build_wait
        with:
          checkName: 'Run Selenium Tests / Build Dash Image'
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          timeoutSeconds: 3600

      - name: Download Dash Image
        id: download_dash
        uses: actions/download-artifact@v3
        if: steps.dash_build_wait.outputs.conclusion == 'success'
        with:
          name: dash
          path: /tmp

      - name: Download Trawler Image
        id: download_trawler
        uses: actions/download-artifact@v3
        if: steps.trawler_build_wait.outputs.conclusion == 'success'
        with:
          name: trawler
          path: /tmp

      - name: Load images to minikube
        id: load_images
        if: success() && steps.download_dash.outcome != 'skipped' && steps.download_trawler.outcome != 'skipped'
        run: |
          minikube image load /tmp/dash.tar
          minikube image load /tmp/trawler.tar

      - name: Install m9sweeper
        id: install_m9sweeper
        if: success() && steps.load_images.outcome != 'skipped'
        run: |
          helm_upgrade_cmd="helm upgrade m9sweeper m9sweeper/m9sweeper --install --wait --create-namespace --namespace m9sweeper-system \
            --set-string dash.init.superAdminEmail=\"super.admin@intelletive.com\" \
            --set-string dash.init.superAdminPassword=\"123456\" \
            --set-string global.apiKey=\"myapikey123456\" \
            --set-string global.jwtSecret=testsecret \
            --set-string rabbitmq.image.repository=\"ghcr.io/m9sweeper/rabbitmq\" \
            --set-string postgresql.image.repository=\"ghcr.io/m9sweeper/postgres\" \
            --set-string postgresql.volumePermissions.image.repository=\"ghcr.io/m9sweeper/debian\" \
            --set-string dash.kubesec.registry=\"ghcr.io\" \
            --set-string dash.kubesec.repository=\"m9sweeper/kubesec\" \
            --set-string dash.image.pullPolicy=\"Never\" \
            --set-string dash.image.tag=\"${{ inputs.dash-image-version }}\" \
            --set-string trawler.image.pullPolicy=\"Never\" \
            --set-string trawler.image.tag=\"${{ inputs.trawler-image-version }}\" \
            --debug --timeout 10m0s"

          if [ -n "${{ inputs.m9sweeper-chart-version }}" ]; then
            helm_upgrade_cmd="${helm_upgrade_cmd} --version ${{ inputs.m9sweeper-chart-version }}"
          fi

          echo "$helm_upgrade_cmd"
          eval "$helm_upgrade_cmd"

      - name: Run Selenium Tests
        continue-on-error: true
        working-directory: selenium-testing/
        if: success() && steps.install_m9sweeper.outcome != 'skipped'
        run: |
          export GATEKEEPER_VERSION=${{ inputs.gatekeeper-version }}
          export DOCKER_REGISTRY="public-docker.nexus.celestialdata.net"
          export SKIP_GATEKEEPER_TESTS="false"
          kubectl port-forward service/m9sweeper-dash 3000:3000 -n m9sweeper-system > /dev/null &
          npm install -y
          npm run test:pipeline

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: (success() || failure()) && steps.install_m9sweeper.outcome != 'skipped'
        with:
          path: |
            selenium-testing/screenshots/
            selenium-testing/downloads/
            selenium-testing/reports/
          if-no-files-found: ignore
          name: k8s-${{ inputs.kubernetes-version }}-testing-artifacts

      - name: Upload Test Reports
        uses: mikepenz/action-junit-report@v3
        if: success() || failure()
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        with:
          report_paths: selenium-testing/reports/*.xml
          fail_on_failure: true
          require_passed_tests: true
          detailed_summary: true
          include_passed: true
          check_name: Test Report - k8s ${{ inputs.kubernetes-version }}

      - name: Cleanup
        if: always()
        run: |
          minikube delete
          helm repo remove m9sweeper