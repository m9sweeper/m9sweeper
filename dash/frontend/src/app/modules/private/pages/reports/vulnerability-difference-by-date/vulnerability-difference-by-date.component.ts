import {ReportsService} from '../../../../../core/services/reports.service';
import {Component, OnDestroy, OnInit} from '@angular/core';
import {VulnerabilitySeverity} from '../../../../../core/enum/VulnerabilitySeverity';
import {NamespaceService} from '../../../../../core/services/namespace.service';
import {take} from 'rxjs/operators';
import {ActivatedRoute} from '@angular/router';
import {CustomValidatorService} from '../../../../../core/services/custom-validator.service';
import {ImageService} from '../../../../../core/services/image.service';
import {AlertService} from 'src/app/core/services/alert.service';
import {format, isBefore} from 'date-fns';
import {Subject} from 'rxjs';
import {ChartSizeService} from '../../../../../core/services/chart-size.service';
import {MatTableDataSource} from '@angular/material/table';
import {IVulnerabilityExportItem} from '../../../../../core/entities/IVulnerabilityExportItem';
import {CsvService} from '../../../../../core/services/csv.service';
import {animate, state, style, transition, trigger} from '@angular/animations';
import {EnumService} from '../../../../../core/services/enum.service';
import {NgxUiLoaderConfig, NgxUiLoaderService, POSITION, SPINNER} from 'ngx-ui-loader';
import {FormBuilder, FormGroup} from '@angular/forms';


@Component({
  selector: 'app-vulnerability-difference-by-date',
  templateUrl: './vulnerability-difference-by-date.component.html',
  styleUrls: ['./vulnerability-difference-by-date.component.scss'],
  animations: [
    // animated transitions for expanding and collapsing cards
    trigger('openClose', [
      state('open', style({
        visibility: 'visible',
        height: '*',
        overflow: '*'
      })),
      state('close', style({
        visibility: 'hidden',
        height: 0,
        overflow: 'hidden'
      })),
      transition('open <=> close', [animate('500ms')]),
    ])
  ]
})
export class VulnerabilityDifferenceByDateComponent implements OnInit, OnDestroy {
  private unsubscribe$ = new Subject<void>();
  vulnerabilitySeverities: Array<VulnerabilitySeverity>;
  clusterNamespaces: Array<string>;
  clusterId: number;
  filterForm: FormGroup;
  previousRequest: {namespaces, severityLevels, fixAvailable, startDate, endDate};
  displayedColumns: string[] = ['image', 'imageId', 'namespaces', 'scannerName', 'type', 'isFixable', 'runningInCluster', 'severity'];
  newVulnDataSource: MatTableDataSource<IVulnerabilityExportItem>;
  fixedVulnDataSource: MatTableDataSource<IVulnerabilityExportItem>;
  numNewVulns: number;
  numFixedVulns: number;
  vulnsLoading = true;
  barChartAttributes = {
    view: [],
    colorScheme: {
      domain: ['#ec3c3c', '#f3865f', '#596fe0', '#59e059', '#888888']
    },
    results: [],
    gradient: false,
    showXAxis: true,
    showYAxis: true,
    barPadding: 2,
    showLegend: false,
    legendPosition: 'below',
    showXAxisLabel: true,
    showYAxisLabel: true,
    yAxisLabel: 'Vulnerabilities',
    xAxisLabel: 'Selected Days',
  };
  showBarChart = true;
  showNewVulnTable = true;
  showFixedVulnTable = true;
  resizeTimeout;


  loaderConfig: NgxUiLoaderConfig = {
    bgsType: SPINNER.threeBounce,
    bgsPosition: POSITION.topCenter,
  };

  constructor(
    private reportsService: ReportsService,
    private namespaceService: NamespaceService,
    private route: ActivatedRoute,
    private formBuilder: FormBuilder,
    private customValidatorService: CustomValidatorService,
    private imageService: ImageService,
    private alertService: AlertService,
    private chartSizeService: ChartSizeService,
    private csvService: CsvService,
    private enumService: EnumService,
    private loaderService: NgxUiLoaderService,
  ) {}

  ngOnInit() {
    this.route.parent.parent.params
      .pipe(take(1))
      .subscribe(param => this.clusterId = param.id);

    this.vulnerabilitySeverities = this.enumService.getEnumValues(VulnerabilitySeverity);

    this.namespaceService.getAllK8sNamespaces(this.clusterId)
      .pipe(take(1))
      .subscribe((response) => {
        this.clusterNamespaces = new Array<string>();
        for (const namespace of response.data) {
          this.clusterNamespaces.push(namespace.name);
        }
        this.clusterNamespaces.sort();
      });

    this.filterForm = this.formBuilder.group({
      namespaces: [[]],
      severityLevels: [[]],
      fixAvailable: [],
      startDate: ['', [this.customValidatorService.dateInPastOrToday]],
      endDate: ['', [this.customValidatorService.dateInPastOrToday]]
    });

    this.setChartSize(true);
  }

  ngOnDestroy() {
    this.unsubscribe$.next();
    this.unsubscribe$.complete();
  }

  onSubmit() {
    this.previousRequest = {
      namespaces: this.filterForm.get('namespaces').value,
      severityLevels: this.filterForm.get('severityLevels').value,
      fixAvailable: this.filterForm.get('fixAvailable').value,
      startDate: format(this.filterForm.get('startDate').value, 'yyyy-MM-dd'),
      endDate: format(this.filterForm.get('endDate').value, 'yyyy-MM-dd')
    };
    this.getReportData();
    this.buildBarChart();
  }

  getReportData() {
    this.vulnsLoading = true;
    this.loaderService.startBackgroundLoader('report-difference-by-date-new-vulns-loader');
    this.loaderService.startBackgroundLoader('report-difference-by-date-old-vulns-loader');
    this.reportsService.getVulnerabilityDifferenceByDate(this.clusterId, this.previousRequest.startDate, this.previousRequest.endDate,
      20, this.previousRequest.namespaces, this.previousRequest.fixAvailable, this.previousRequest.severityLevels)
      .pipe(take(1))
      .subscribe(response => {
        this.fixedVulnDataSource = new MatTableDataSource(response.data.fixedVulnerabilities);
        this.newVulnDataSource = new MatTableDataSource(response.data.newVulnerabilities);
        this.numFixedVulns = response.data.countOfFixedVulnerabilities;
        this.numNewVulns = response.data.countOfNewVulnerabilities;
        this.loaderService.stopBackgroundLoader('report-difference-by-date-new-vulns-loader');
        this.loaderService.stopBackgroundLoader('report-difference-by-date-old-vulns-loader');
      }, error => {
        this.alertService.danger(`Error building report: ${error.error.message}`);
        this.loaderService.stopBackgroundLoader('report-difference-by-date-new-vulns-loader');
        this.loaderService.stopBackgroundLoader('report-difference-by-date-old-vulns-loader');
      });
  }

  buildBarChart() {
    const filters = {clusterIds: [this.clusterId],
      startDate: this.previousRequest.startDate,
      endDate: this.previousRequest.endDate,
      namespace: this.previousRequest.namespaces
    };
    this.imageService.getCountOfVulnerabilities(filters, 'savedAtDate')
      .pipe(take(1))
      .subscribe(response => {
          const startElement = response.data.shift();
          const endElement = response.data.pop();
          if (startElement && endElement) {
            const startElementDate = startElement.savedAtDate.split('T')[0];
            const endElementDate = endElement.savedAtDate.split('T')[0];
            this.barChartAttributes.results = [
              {
                name: 'Start Date',
                series: [
                  {
                    name: VulnerabilitySeverity.CRITICAL,
                    value: +startElement.criticalIssues,
                    date: startElementDate
                  },
                  {
                    name: VulnerabilitySeverity.MAJOR,
                    value: +startElement.majorIssues,
                    date: startElementDate
                  },
                  {
                    name: VulnerabilitySeverity.MEDIUM,
                    value: +startElement.mediumIssues,
                    date: startElementDate
                  },
                  {
                    name: VulnerabilitySeverity.LOW,
                    value: +startElement.lowIssues,
                    date: startElementDate
                  },
                  {
                    name: VulnerabilitySeverity.NEGLIGIBLE,
                    value: +startElement.negligibleIssues,
                    date: startElementDate
                  },
                ]
              },
              {
                name: 'End Date',
                series: [
                  {
                    name: VulnerabilitySeverity.CRITICAL,
                    value: +endElement.criticalIssues,
                    date: endElementDate
                  },
                  {
                    name: VulnerabilitySeverity.MAJOR,
                    value: +endElement.majorIssues,
                    date: endElementDate
                  },
                  {
                    name: VulnerabilitySeverity.MEDIUM,
                    value: +endElement.mediumIssues,
                    date: endElementDate
                  },
                  {
                    name: VulnerabilitySeverity.LOW,
                    value: +endElement.lowIssues,
                    date: endElementDate
                  },
                  {
                    name: VulnerabilitySeverity.NEGLIGIBLE,
                    value: +endElement.negligibleIssues,
                    date: endElementDate
                  },
                ]
              }
            ];
          } else {
            this.barChartAttributes.results = [];
          }
        },
        error => {
          this.alertService.danger(error.error.message);
        });
  }

  downloadReport() {
    this.loaderService.start('csv-download');
    this.reportsService.downloadVulnerabilityDifferenceByDate(this.clusterId, this.previousRequest.startDate,
      this.previousRequest.endDate, this.previousRequest.namespaces, this.previousRequest.fixAvailable,
      this.previousRequest.severityLevels)
      .pipe(take(1))
      .subscribe(result => {
        this.csvService.downloadCsvFile(result.data.csv, result.data.filename);
      }, error => {
        this.loaderService.stop('csv-download');
        this.alertService.danger(`Error downloading report: ${error.error.message}`);
      }, () => {
        this.loaderService.stop('csv-download');
      });
  }

  get filtersValid() {
    return this.filterForm.valid &&
      isBefore(this.filterForm.get('startDate').value, this.filterForm.get('endDate').value);
  }

  setChartSize(isInitial = false) {
    // debounce chart resizing
    clearTimeout(this.resizeTimeout);
    this.resizeTimeout = setTimeout(() => {
      this.executeResize(isInitial);
    }, 100);
  }

  executeResize(isInitial = false) {
    const innerWindow = document.getElementsByTagName('app-vulnerability-difference-by-date').item(0) as HTMLElement;
    let innerScreenWidth = innerWindow.offsetWidth;
    if (isInitial) {
      const sideNav = document.getElementById('primary-side-nav');
      if (sideNav.style.visibility !== 'hidden') {
        // have to do this the first time b/c the side nav is not yet in place
        // --> the width retrieved doesn't take it into account
        innerScreenWidth -= sideNav.clientWidth;
      }
    }
    this.barChartAttributes.view = this.chartSizeService.getChartSize(
      innerScreenWidth,
      { xs: 1, s: 1, m: 1, l: 1 },
      { left: 20, right: 20 },
      { left: 0, right: 0 },
      { left: 0, right: 0 },
      { left: 16, right: 16 },
      { height: 3, width: 8 },
      500,
    );
  }
}
