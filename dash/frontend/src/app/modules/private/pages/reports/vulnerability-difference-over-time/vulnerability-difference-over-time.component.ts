import {AfterViewInit, Component, HostListener, OnDestroy, OnInit} from '@angular/core';
import {Subject} from 'rxjs';
import {ActivatedRoute} from '@angular/router';
import {take, takeUntil} from 'rxjs/operators';
import {format, sub, startOfToday, isBefore} from 'date-fns';
import {ImageService} from '../../../../../core/services/image.service';
import {FormBuilder, FormGroup, Validators} from '@angular/forms';
import {ChartSizeService} from '../../../../../core/services/chart-size.service';

@Component({
  selector: 'app-vulnerability-difference-over-time',
  templateUrl: './vulnerability-difference-over-time.component.html',
  styleUrls: ['./vulnerability-difference-over-time.component.scss']
})
export class VulnerabilityDifferenceOverTimeComponent implements OnInit, AfterViewInit, OnDestroy {
  private unsubscribe$ = new Subject<void>();
  lineChartAttributes = {
    view: [],
    colorScheme: {
      domain: ['#59e059']
    },
    results: [
      {
        name: '',
        series: [
          {
            value: 0,
            name: ''
          }
        ]
      }
    ],
    gradient: false,
    showXAxis: true,
    showYAxis: true,
    showLegend: false,
    legendPosition: 'below',
    showXAxisLabel: true,
    showYAxisLabel: true,
    autoScale: false,
    yAxisLabel: 'Difference in Vulnerabilities',
    xAxisLabel: 'Day of Month',
    yScaleMax: 0,
    yScaleMin: 0
  };
  clusterId;
  filterForm: FormGroup;
  resizeTimeout;

  constructor(
    private route: ActivatedRoute,
    private imageService: ImageService,
    private formBuilder: FormBuilder,
    private chartSizeService: ChartSizeService,
  ) {}

  ngOnInit() {
    this.route.parent.parent.params
      .pipe(take(1))
      .subscribe(param => {
        this.clusterId = param.id;
      });
    this.filterForm = this.formBuilder.group({
      startDate: [sub(startOfToday(), {days: 28}), Validators.required],
      endDate: [startOfToday(), Validators.required]
    });

    this.getVulnerabilityDifferences(this.clusterId);
  }

  ngAfterViewInit() {
    this.setChartSize();
  }

  ngOnDestroy() {
    this.unsubscribe$.next();
    this.unsubscribe$.complete();
  }

  getVulnerabilityDifferences(clusterId: number) {
    const filters = {clusterIds: [clusterId],
      startDate: format(sub(this.filterForm.get('startDate').value, {days: 1}), 'yyyy-MM-dd'),
      endDate: format(this.filterForm.get('endDate').value, 'yyyy-MM-dd')};
    const differenceList = [];
    this.imageService.getCountOfVulnerabilities(filters, 'savedAtDate')
      .pipe(take(1))
      .subscribe(response => {
        this.lineChartAttributes.results = [
          {
            name: '',
            series: response.data.map((data, index, dataArray) => {
              if (index > 0) {
                const difference = (+data.criticalIssues + +data.majorIssues + +data.mediumIssues + +data.lowIssues + +data.negligibleIssues)
                  - (+dataArray[index - 1].criticalIssues + +dataArray[index - 1].majorIssues +
                    +dataArray[index - 1].mediumIssues + +dataArray[index - 1].lowIssues + +dataArray[index - 1].negligibleIssues);
                differenceList.push(difference);
                return {
                  name: data.savedAtDate.split('T')[0],
                  value: difference
                };
              }
            })
          }
        ];
        const yAxisResults = this.calculateYAxisTicks(differenceList);
        this.lineChartAttributes.yScaleMax = yAxisResults.maxValue;
        this.lineChartAttributes.yScaleMin = -yAxisResults.maxValue;
        // because each entry is calculated using the day before, the first entry in the list will be undefined
        // prune that value here from both the results and the x-axis date labels
        this.lineChartAttributes.results[0].series.shift();
      });
  }

  @HostListener('window:resize', ['$event'])
  setScreenSize($event?: any) {
    this.setChartSize();
  }

  scanXTickFormatting = (e: string) => {
    const dateArray = e.split('-');
    return `${dateArray[1]}-${dateArray[2]}`;
  }

  setChartSize(isInitial = false) {
    // debounce chart resizing
    clearTimeout(this.resizeTimeout);
    this.resizeTimeout = setTimeout(() => {
      this.executeResize(isInitial);
    }, 100);
  }

  executeResize(isInitial = false) {
    const innerWindow = document.getElementsByTagName('app-vulnerability-difference-over-time').item(0) as HTMLElement;
    let innerScreenWidth = innerWindow.offsetWidth;
    if (isInitial) {
      const sideNav = document.getElementById('primary-side-nav');
      if (sideNav.style.visibility !== 'hidden') {
        // have to do this the first time b/c the side nav is not yet in place
        // --> the width retrieved doesn't take it into account
        innerScreenWidth -= sideNav.clientWidth;
      }
    }
    this.lineChartAttributes.view = this.chartSizeService.getChartSize(
      innerScreenWidth,
      { xs: 1, s: 1, m: 1, l: 1 },
      { left: 20, right: 20 },
      { left: 0, right: 0 },
      { left: 0, right: 0 },
      { left: 16, right: 16 },
      { height: 3, width: 8 },
      600,
    );
  }

  calculateYAxisTicks(differenceList: number[], tickCount: number = 6): {range: number[], maxValue: number} {
    if (!differenceList?.length) {
      return {range: [], maxValue: 0};
    }
    const range = [];
    let maxValue = 0;
    differenceList.forEach(value => {
      if (Math.abs(value) > maxValue) {
        maxValue = Math.abs(value);
      }
    });
    let distance = Math.floor(maxValue / tickCount);
    // Ensure the y-axis labels are in multiples of 5 for readability
    distance -= distance % 5;
    for (let i = 0; i <= tickCount; i++) {
      range.push(distance * i);
      if (i !== 0) {
        range.unshift(distance * -i);
      }
    }
    return {range, maxValue};
  }

  get filtersValid(): boolean {
    return this.filterForm.valid &&
      isBefore(this.filterForm.get('startDate')?.value, this.filterForm.get('endDate')?.value);
  }

  submit() {
    this.getVulnerabilityDifferences(this.clusterId);
  }
}
