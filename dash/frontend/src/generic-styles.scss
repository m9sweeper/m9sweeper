/**
This is where you can add generic styles that will be applied by screen size.
We DO NOT want classes that will be specific for pages - only global classes.

To auto-generate a new property, add it to the $classesToGenerate map.
See the comment directly above its definition for details on how to define the property.
This method is inspired by the Bootstrap Sass Utility API (https://getbootstrap.com/docs/5.3/utilities/api/#using-the-api)

Media query sizes are based on the sizes defined in npm flexboxgrid
https://www.npmjs.com/package/flexboxgrid

naming and spacing defaults are based on Bootstrap spacing
exception: explicitly name sizes xs-lg; omit sizes xl & xxl
https://getbootstrap.com/docs/5.3/utilities/spacing/
0 - for classes that eliminate the margin or padding by setting it to 0
1 - for classes that set the margin or padding to $spacer * .25
2 - for classes that set the margin or padding to $spacer * .5
3 - for classes that set the margin or padding to $spacer
4 - for classes that set the margin or padding to $spacer * 1.5
5 - for classes that set the margin or padding to $spacer * 3
auto - for classes that set the margin to auto
 */


/**
Object format:
-----
propertyName: (
  abbreviation: propertyAbbreviation,
  values: (
    valueShorthand: value,
  ),
)
-----
Generates:
-----
.propertyAbbreviation-breakpointShorthand-valueShorthand {
  propertyName: value;
}
-----
Ex:
height: (
  abbreviation: h,
  values: (
    100: 100%,
  ),
)

.h-xs-100 {
  height: 100%
}
 */
@use '@angular/material' as mat;

$classesToGenerate: (
  display: (
    abbreviation: 'display',
    values: (
      block: block, inline: inline, inline-block: inline-block,
      flex: flex, inline-flex: inline-flex,
      grid: grid, inline-grid: inline-grid,
      flow-root: flow-root, table: table, none: none,
    ),
  ),
  height: (
    abbreviation: 'h',
    values: (
      auto: auto, unset: unset,
      fit: 'fit-content',
      0: 0, 50: 50%, 75: 75%, 98: 98%, 100: 100%,
    ),
  ),
  flex-direction: (
    abbreviation: 'flex-direction',
    values: (
      row: row, row-reverse: row-reverse,
      col: column, col-reverse: column-reverse,
      inherit: inherit, initial: initial,
      revert: revert, revert-layer: revert-layer,
      unset: unset,
    ),
  ),
  flex: (
    abbreviation: 'flex',
    values: (
      1: 1
    )
  ),
  align-items: (
    abbreviation: 'align-items',
    values: (
      normal: normal, stretch: stretch,
      center: center, start: start, end: end,
      flex-start: flex-start, flex-end: flex-end,
      self-start: self-start, self-end: self-end,
      baseline: baseline,
      first-baseline: "first baseline", last-baseline: "last baseline",
      safe-center: "safe center", unsafe-center: "unsafe center",
      inherit: inherit, initial: initial,
      revert: revert, revert-layer: "revert-layer",
      unset: unset,
    ),
  ),
  align-self: (
    abbreviation: 'align-self',
    values: (
      auto: auto, stretch: stretch, center: center,
      flex-start: flex-start, flex-end: flex-end,
      baseline: baseline, initial: initial, inherit: inherit
    )
  ),
  justify-content: (
    abbreviation: 'justify-content',
    values: (
      center: center, start: start, end: end,
      flex-start: flex-start, flex-end: flex-end,
      left: left, right: right, normal: normal,
      space-between: space-between, space-around: space-around,
      space-evenly: space-evenly, stretch: stretch,
      safe-center: "safe center", unsafe-center: "unsafe center",
      inherit: inherit, initial: initial,
      revert: revert, revert-layer: "revert-layer",
      unset: unset,
    ),
  ),
  text-align: (
    abbreviation: 'text-align',
    values: (
      left: left, center: center, right: right,
      start: start, end: end, justify: justify,
      justify-all: "justify-all", match-parent: "match-parent",
      inherit: inherit, initial: initial, revert: revert,
      revert-layer: "revert-layer", unset: unset
    )
  ),

  vertical-align: (
    abbreviation: 'vertical-align',
    values: (
      baseline: baseline,
      top: top,
      middle: middle,
      bottom: bottom,
      sub: sub,
      text-top: 'text-top'
    )
  ),

  overflow: (
    abbreviation: 'overflow',
    values: (
      scroll: scroll,
      hidden: hidden,
      auto: auto,
      clip: clip,
      visible: visible
    )
  ),

  overflow-x: (
    abbreviation: 'overflow-x',
    values: (
      scroll: scroll,
      hidden: hidden,
      auto: auto,
      visible: visible
    )
  ),

  overflow-y: (
    abbreviation: 'overflow-x',
    values: (
      scroll: scroll,
      hidden: hidden,
      auto: auto,
      visible: visible
    )
  ),

  font: (
    abbreviation: 'font',
    values: (
      500: '500 20px/32px Roboto,Helvetica Neue,sans-serif'
    )
  ),
  font-size: (
    abbreviation: 'font-size',
    values: (
      20: '20px',
      26: '26px'
    )
  ),

  font-weight: (
    abbreviation: 'font-weight',
    values: (
      bold: bold
    )
  ),

  line-height: (
    abbreviation: 'line-height',
    values: (
      1: '1.5em',
      2: 2,
      20: '20px'
    )
  ),

  width: (
    abbreviation: 'width',
    values: (
      auto: auto,
      100: 100%
    )
  ),
  min-width: (
    abbreviation: 'min-width',
    values: (
      3: '3rem',
      4: '4rem',
      8: '8rem'
    )
  ),
  background-color: (
    abbreviation: 'background-color',
    values: (
      grey: mat.get-color-from-palette(mat.$gray-palette, 300),
      white: white
    )
  )
);

$spacer: 1em;
$sides: (
  t: ['top'],
  b: ['bottom'],
  s: ['inline-start'],
  e: ['inline-end'],
  x: ['right', 'left'],
  y: ['top', 'bottom'],
  all: ['inline-start', 'top', 'inline-end', 'bottom'],
);

@mixin build-spacing-classes($breakpointShorthand: xs, $makeImportant: 'false') {
  $properties: (
    p: "padding",
    m: "margin",
  );
  $sizes: (
    auto: 'auto',
    0: 0,
    1: ($spacer * 0.25),
    2: ($spacer * 0.5),
    3: ($spacer),
    4: ($spacer * 1.5),
    5: ($spacer * 3),
    6: ($spacer * 0.8),
    7: ($spacer * 1.25),
    8: ($spacer * 1.88),
    9: ($spacer * 0.625),
    10: '10px', 15: '15px',
    20: '20px', 31: '31px'
  );

  @each $propertyShorthand, $property in $properties {
    @each $sideShorthand, $sideList in $sides {
      $sideShorthandToUse: $sideShorthand;
      @if $sideShorthand == 'all' {
        $sideShorthandToUse: '';
      }
      @each $sizeShorthand, $size in $sizes {
        #{"."}#{$propertyShorthand}#{$sideShorthandToUse}-#{$breakpointShorthand}-#{$sizeShorthand} {
          @if $makeImportant == 'true' {
            @each $side in $sideList {
              #{$property}-#{$side}: #{$size} !important;
            }
          } @else {
            @each $side in $sideList {
              #{$property}-#{$side}: #{$size};
            }
          }
        }
      }
    }
  }
}

@mixin generate-basic-classes($breakpointShorthand: xs) {
  // @if $sideShorthand == 'all' {}
  @each $propertyName, $definition in $classesToGenerate {
    $propertyAbbreviation: map-get($definition, abbreviation);
    $usesSides: map-get($definition, usesSides);
    $values: map-get($definition, values);
    @each $valueShorthand, $value in $values {
      #{"."}#{$propertyAbbreviation}-#{$breakpointShorthand}-#{$valueShorthand} { #{$propertyName}: #{$value} #{'!important'}; }

      //@debug #{"."}#{$propertyAbbreviation}-#{$breakpointShorthand}-#{$valueShorthand} #{"{"} #{$propertyName}#{":"} #{$value} #{'!important'}#{"; }"};
    }
  }
}


@include build-spacing-classes();
@include generate-basic-classes();


// sm screen sizes
@media only screen and (min-width: 48em) {
  @include build-spacing-classes(sm);
  @include generate-basic-classes(sm);
}

// md screen sizes
@media only screen and (min-width: 62em) {
  @include build-spacing-classes(md);
  @include generate-basic-classes(md);
}

// lg screen sizes
@media only screen and (min-width: 75em) {
  @include build-spacing-classes(lg);
  @include generate-basic-classes(lg);
}

@media print {
  @include build-spacing-classes(print, 'true');
  @include generate-basic-classes(print);
}
